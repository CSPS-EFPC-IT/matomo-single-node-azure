{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"applicationGatewaySslCertificateUri": {
			"type": "string",
			"metadata": {
				"description": "The URI of the SSL Certificate Secret used by the Application Gateway."
			}
		},
		"applicationGatewayUserAssignedIdentity": {
			"type": "object",
			"metadata": {
				"description": "The User Identity assigned to the Application Gateway to get the SSL Certificate Secret."
			}
		},
		"armTemplateRepoRawFilesBaseUrl": {
			"type": "string",
			"metadata": {
				"description": "The base URL of the Azure Resource Manager template repository raw files."
			}
		},
		"databaseServerAdministratorLogin": {
			"type": "securestring",
			"metadata": {
				"description": "The username to use in order to manage the database server."
			}
		},
		"databaseServerAdministratorLoginPassword": {
			"type": "securestring",
			"metadata": {
				"description": "The password to use in order to manage the database server."
			}
		},
		"databaseServerBackupRetentionDays": {
			"type": "int",
			"minValue": 7,
			"maxValue": 35,
			"metadata": {
				"description": "The database backup retention period in days."
			}
		},
		"databaseServerConfigurationAuditLogEvents": {
			"type": "string",
			"defaultValue": "ADMIN,CONNECTION,DCL,DDL,DML,GENERAL,TABLE_ACCESS",
			"metadata": {
				"description": "The value of the database server's parameter \"audit_log_events\"."
			}
		},
		"databaseServerConfigurationCharacterSetServer": {
			"type": "string",
			"defaultValue": "utf8mb4",
			"metadata": {
				"description": "The value of the database server's parameter \"character_set_server\"."
			}
		},
		"databaseServerConfigurationCollationServer": {
			"type": "string",
			"defaultValue": "utf8mb4_0900_ai_ci",
			"metadata": {
				"description": "The value of the database server's parameter \"collation_server\"."
			}
		},
		"databaseServerGeoRedundantBackup": {
			"type": "string",
			"defaultValue": "Disabled",
			"allowedValues": [
				"Disabled",
				"Enabled"
			],
			"metadata": {
				"description": "Whether or not geo redundant backup is enabled."
			}
		},
		"databaseServerHighAvailabilityMode": {
			"type": "string",
			"defaultValue": "Disabled",
			"allowedValues": [
				"Disabled",
				"SameZone",
				"ZoneRedundant"
			],
			"metadata": {
				"description": "The high availability mode for the database server."
			}
		},
		"databaseServerSkuName": {
			"type": "string",
			"defaultValue": "Standard_D2ds_v4",
			"metadata": {
				"description": "The name of the sku for the database server's virtual machine."
			}
		},
		"databaseServerSkuTier": {
			"type": "string",
			"defaultValue": "GeneralPurpose",
			"allowedValues": [
				"Burstable",
				"GeneralPurpose",
				"MemoryOptimized"
			],
			"metadata": {
				"description": "The tier of the particular SKU."
			}
		},
		"databaseServerStandbyAvailabilityZone": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "The availability zone of the standby database server."
			}
		},
		"databaseServerStorageAutogrow": {
			"type": "string",
			"defaultValue": "Enabled",
			"allowedValues": [
				"Disabled",
				"Enabled"
			],
			"metadata": {
				"description": "Enable database storage auto grow or not."
			}
		},
		"databaseServerStorageIops": {
			"type": "int",
			"defaultValue": 1000,
			"minValue": 360,
			"maxValue": 3200,
			"metadata": {
				"description": "The maximum IOPS allocated to the database."
			}
		},
		"databaseServerStorageSizeGB": {
			"type": "int",
			"minValue": 20,
			"maxValue": 16384,
			"defaultValue": 64,
			"metadata": {
				"description": "The size of data storage allocated to the database in GB."
			}
		},
		"databaseServerVersion": {
			"type": "string",
			"defaultValue": "8.0.21",
			"allowedValues": [ "5.7", "8.0.21" ],
			"metadata": {
				"description": "The version of the MySQL Server to deploy, if any."
			}
		},
		"dataDiskSizeGB": {
			"type": "int",
			"allowedValues": [ 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32767 ],
			"metadata": {
				"description": "The size of the Matomo Data Disk in giga bytes."
			}
		},
		"deniedIpAddressList": {
			"type": "securestring",
			"defaultValue": "0.0.0.0/32", // An unusable IP address.
			"metadata": {
				"description": "A comma separated list of source IP addresses (in CIDR notation) that must NOT access to the solution."
			}
		},
		"deploymentTimestamp": {
			"type": "int",
			"defaultValue": "[int(utcNow('ddHHmmss'))]",
			"metadata": {
				"description": "The deployment timestamp. Determines whether the Virtual Machine Custom Script extension is rerun. Default value will have the Virtual Machine Custom Script extension rerun at each ARM template deployment. Ref.: https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/custom-script-linux#property-value-details"
			}
		},
		"environmentName": {
			"type": "string",
			"defaultValue": "dev",
			"allowedValues": [
				"dev",
				"staging",
				"prod"
			],
			"metadata": {
				"description": "The name of the provisioned environment. Used to build resource names."
			}
		},
		"genericShellScriptsRepoRawFilesBaseUrl": {
			"type": "string",
			"metadata": {
				"description": "The public base URL of the generic-shell-scripts repository's raw files."
			}
		},
		"logAnalyticsWorkspaceRetentionPeriod": {
			"type": "int",
			"minValue": 30,
			"maxValue": 730,
			"defaultValue": 365,
			"metadata": {
				"description": "The log retention period in days of the Log Analytics Workspace resource."
			}
		},
		"matomoDatabasePassword": {
			"type": "securestring",
			"metadata": {
				"description": "The Matomo application database account password."
			}
		},
		"matomoDatabaseUsername": {
			"type": "securestring",
			"metadata": {
				"description": "The Matomo application database account username."
			}
		},
		"matomoVersion": {
			"type": "string",
			"metadata": {
				"description": "The version of Matomo to install or upgrade to."
			}
		},
		"projectPublicRawFilesBaseUrl": {
			"type": "string",
			"metadata": {
				"description": "The public base URL of this project's repository's raw files."
			}
		},
		"projectShortName": {
			"type": "string",
			"minLength": 1,
			"maxLength": 13,
			"metadata": {
				"description": "The short name of the project. This string will be used to name all resources required. It must only contain letters (a-z,A-Z), hyphens (-) and underscore (_) characters, and must not exceed 13 characters in lenght."
			}
		},
		"resourceLocation": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "The name of the Azure location where resources will be created."
			}
		},
		"resourceTags": {
			"type": "object",
			"defaultValue": {},
			"metadata": {
				"description": "Generic tags for any resources."
			}
		},
		"smtpServerFqdn": {
			"type": "string",
			"metadata": {
				"description": "The fully qualified domain name of the email server to use."
			}
		},
		"smtpServerFromAddress": {
			"type": "string",
			"metadata": {
				"description": "The FROM address for every email sent by the solution."
			}
		},
		"smtpServerPassword": {
			"type": "securestring",
			"metadata": {
				"description": "The SMTP server account password."
			}
		},
		"smtpServerPort": {
			"type": "int",
			"metadata": {
				"description": "The SMTP server port."
			}
		},
		"smtpServerUsername": {
			"type": "securestring",
			"metadata": {
				"description": "The SMTP server account username."
			}
		},
		"storageAccountAllowedIpAddressList": {
			"type": "securestring",
			"defaultValue": "",
			"metadata": {
				"description": "Optional - A comma separated list of IP addresses (CIDR notation) ALLOWED to access the storage account. Some restrictions apply. See https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security?tabs=azure-portal#grant-access-from-an-internet-ip-range for details."
			}
		},
		"virtualMachineTags": {
			"type": "object",
			"defaultValue": {},
			"metadata": {
				"description": "Optional tags specific to Virtual Machines."
			}
		},
		"virtualNetworkAddressBase": {
			"type": "securestring",
			"metadata": {
				"description": "The virtual network IP address prefix. Format is '255.255.255'."
			}
		},
		"webServerAdminEmail": {
			"type": "string",
			"metadata": {
				"description": "The Web server administrator's email address."
			}
		},
		"webServerAdminPassword": {
			"type": "securestring",
			"metadata": {
				"description": "The Web server administrator's password."
			}
		},
		"webServerAdminUsername": {
			"type": "securestring",
			"metadata": {
				"description": "The Web server administrator's username."
			}
		},
		"webServerBackendMaxExecutionTime": {
			"type": "int",
			"metadata": {
				"description": "The time (in seconds) allowed to the Web server backend to fullfil a request."
			}
		},
		"webServerFqdn": {
			"type": "string",
			"metadata": {
				"description": "The custom fully qualified domain name for this matomo instance."
			}
		},
		"webServerRebootUtcTime": {
			"type": "string",
			"metadata": {
				"description": "The time, in UTC, when the Web server may automatically reboot if required following an unattended upgrade. Format is 'HH:MM'."
			}
		},
		"webServerVirtualMachineSize": {
			"type": "string",
			"metadata": {
				"description": "The size of the virtual machine used as webserver. See https://docs.microsoft.com/en-us/azure/cloud-services/cloud-services-sizes-specs for allowed values."
			}
		}
	},
	"functions": [
		{
			"namespace": "custom",
			"members": {
				"cleanName": {
					"parameters": [
						{
							"name": "dirtyName",
							"type": "string"
						}
					],
					"output": {
						"type": "string",
						"value": "[replace(replace(replace(parameters('dirtyName'), '-', ''), '_', ''), ' ', '')]"
					}
				}
			}
		}
	],
	"variables": {
		"applicationGatewayBackendAddressPoolName": "matomo-web-server",
		"applicationGatewayBackendHttpSettingsCollectionName": "[concat(parameters('projectShortName'), '-HTTP-Settings')]",
		"applicationGatewayBackendHttpSettingsCollectionRequestTimeout": "[add(parameters('webServerBackendMaxExecutionTime'),1)]",
		"applicationGatewayFrontendIPConfigurationsName": "appGwPublicFrontendIp",
		"applicationGatewayFrontendPortHttpName": "HTTP-Port",
		"applicationGatewayFrontendPortHttpsName": "HTTPS-Port",
		"applicationGatewayGatewayIPConfigurationsName": "appGatewayIpConfig",
		"applicationGatewayHttpListenersHttpName": "HTTP-Listener",
		"applicationGatewayHttpListenersHttpsName": "HTTPS-Listener",
		"applicationGatewayName": "[concat(variables('resourceNamePrefix'), '-AG')]",
		"applicationGatewayNetworkSecurityGroupName": "[concat(variables('resourceNamePrefix'), '-PAZ-AG-NSG')]",
		"applicationGatewayPublicIpDomainNameLabel": "[tolower(concat(variables('resourceNamePrefix')))]",
		"applicationGatewayPublicIpName": "[concat(variables('applicationGatewayName'), '-PublicIP')]",
		"applicationGatewayRedirectConfigurationsName": "HTTP-Redirect",
		"applicationGatewayRequestRoutingRuleHttpName": "HTTP-Rule",
		"applicationGatewayRequestRoutingRuleHttpsName": "HTTPS-Rule",
		"applicationGatewayRewriteRuleSetsName": "Custom-Rewrite-Rules",
		"applicationGatewaySslCertificateHttpsName": "HTTPS-Certificate",
		"applicationGatewaySubnetAddressPrefix": "[concat(parameters('virtualNetworkAddressBase'), '.0/27')]",
		"applicationGatewaySubnetName": "[concat(variables('resourceNamePrefix'), '-PAZ-AG-SN')]",
		"applicationNetworkSecurityGroupName": "[concat(variables('resourceNamePrefix'), '-PAZ-APP-NSG')]",
		"applicationSubnetAddressPrefix": "[concat(parameters('virtualNetworkAddressBase'), '.32/27')]",
		"applicationSubnetName": "[concat(variables('resourceNamePrefix'), '-PAZ-APP-SN')]",
		"bastionName": "[concat(variables('resourceNamePrefix'), '-BH')]",
		"bastionPublicIpName": "[concat(variables('bastionName'), '-PublicIP')]",
		"bastionSubnetAddressPrefix": "[concat(parameters('virtualNetworkAddressBase'), '.128/27')]",
		"bastionSubnetName": "AzureBastionSubnet",
		"databaseServerApiVersion": "2023-06-30",
		"databaseServerName": "[toLower(concat(variables('resourceNamePrefix'), '-DB'))]",
		"databaseServerNetworkSecurityGroupName": "[concat(variables('resourceNamePrefix'), '-DATA-NSG')]",
		"databaseServerSubnetAddressPrefix": "[concat(parameters('virtualNetworkAddressBase'), '.64/27')]",
		"databaseServerSubnetName": "[concat(variables('resourceNamePrefix'), '-DATA-SN')]",
		"logAnalyticsWorkspaceName": "[concat(variables('resourceNamePrefix'), '-LAW')]",
		"matomoDatabaseName": "[tolower(custom.cleanName(parameters('matomoDatabaseUsername')))]",
		"privateDnsZoneName": "[concat(variables('databaseServerName'),'.private.mysql.database.azure.com')]",
		"privateDnsZoneVirtualNetworkLinkName": "[concat(variables('privateDnsZoneName'), '/', variables('virtualNetworkName'))]",
		"recoveryServiceVaultBackupPoliciesDeploymentName": "[take(concat(deployment().name, '_rsv-bp'), 64)]",
		"recoveryServiceVaultDeploymentName": "[take(concat(deployment().name, '_rsv'), 64)]",
		"recoveryServiceVaultProtectedItemsDeploymentName": "[take(concat(deployment().name, '_rsv-pi'), 64)]",
		"resourceNamePrefix": "[concat(parameters('projectShortName'), if(equals(parameters('environmentName'), 'prod'), '', concat('-', toupper(parameters('environmentName')))))]",
		"storageAccountAllowedIpAddressArray": "[if(empty(parameters('storageAccountAllowedIpAddressList')), createArray(), split(parameters('storageAccountAllowedIpAddressList'), ','))]",
		"storageAccountName": "[tolower(concat(custom.cleanName(parameters('projectShortName')), if(equals(parameters('environmentName'), 'prod'), '', take(parameters('environmentName'),4)),'sa'))]",
		"virtualNetworkAddressPrefix": "[concat(parameters('virtualNetworkAddressBase'), '.0/24')]",
		"virtualNetworkName": "[concat(variables('resourceNamePrefix'), '-VN')]",
		"webServerComputerName": "webserver",
		"webServerVirtualMachineDataDiskName": "[concat(variables('webServerVirtualMachineNamePrefix'), '-Data-Disk')]",
		"webServerVirtualMachineName": "[concat(variables('webServerVirtualMachineNamePrefix'), '-VM')]",
		"webServerVirtualMachineNamePrefix": "[concat(variables('resourceNamePrefix'), '-WebServer')]",
		"webServerVirtualMachineNetworkInterfaceCardName": "[concat(variables('webServerVirtualMachineNamePrefix'), '-NIC')]",
		"webServerVirtualMachineOsDiskName": "[concat(variables('webServerVirtualMachineNamePrefix'), '-OS-Disk')]",
		"webServerVirtualMachineSetupExtensionName": "SetupWebServer",
		"copy": [
			{
				"name": "storageAccountAllowedIpRuleArray",
				"count": "[length(variables('storageAccountAllowedIpAddressArray'))]",
				"input": {
					"action": "Allow",
					"value": "[variables('storageAccountAllowedIpAddressArray')[copyIndex('storageAccountAllowedIpRuleArray')]]"
				}
			}
		]
	},
	"resources": [
		{
			"type": "microsoft.operationalinsights/workspaces",
			"apiVersion": "2021-06-01",
			"name": "[variables('logAnalyticsWorkspaceName')]",
			"tags": "[parameters('resourceTags')]",
			"location": "[parameters('resourceLocation')]",
			"properties": {
				"sku": {
					"name": "pergb2018"
				},
				"retentionInDays": "[parameters('logAnalyticsWorkspaceRetentionPeriod')]",
				"features": {
					"enableLogAccessUsingOnlyResourcePermissions": true
				},
				"workspaceCapping": {
					"dailyQuotaGb": -1
				},
				"publicNetworkAccessForIngestion": "Enabled",
				"publicNetworkAccessForQuery": "Enabled"
			}
		},
		{
			"condition": "[ equals(parameters('environmentName'), 'staging' )]",
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2019-06-01",
			"name": "[variables('storageAccountName')]",
			"tags": "[parameters('resourceTags')]",
			"location": "[parameters('resourceLocation')]",
			"dependsOn": [],
			"sku": {
				"name": "Standard_LRS",
				"tier": "Standard"
			},
			"kind": "StorageV2",
			"properties": {
				"minimumTlsVersion": "TLS1_2",
				"allowBlobPublicAccess": false,
				"networkAcls": {
					"bypass": "AzureServices",
					"virtualNetworkRules": [],
					"ipRules": "[variables('storageAccountAllowedIpRuleArray')]",
					"defaultAction": "Deny"
				},
				"supportsHttpsTrafficOnly": true,
				"encryption": {
					"services": {
						"blob": {
							"keyType": "Account",
							"enabled": true
						}
					},
					"keySource": "Microsoft.Storage"
				},
				"accessTier": "Hot"
			}
		},
		{
			"type": "Microsoft.Network/networkSecurityGroups",
			"apiVersion": "2019-11-01",
			"name": "[variables('applicationGatewayNetworkSecurityGroupName')]",
			"tags": "[parameters('resourceTags')]",
			"location": "[parameters('resourceLocation')]",
			"properties": {
				"securityRules": [
					{
						"name": "Deny_CustomExclusion_Any_Any_Inbound",
						"properties": {
							"access": "Deny",
							"description": "Custom security rule.",
							"destinationAddressPrefix": "*",
							"destinationPortRange": "*",
							"direction": "Inbound",
							"priority": 500,
							"protocol": "*",
							"sourceAddressPrefixes": "[split(parameters('deniedIpAddressList'),',')]",
							"sourcePortRange": "*"
						}
					},
					{
						"name": "Allow_PublicInternet_Any_80_443_Inbound",
						"properties": {
							"access": "Allow",
							"destinationAddressPrefix": "*",
							"destinationPortRanges": [
								"80",
								"443"
							],
							"direction": "Inbound",
							"priority": 1000,
							"protocol": "*",
							"sourceAddressPrefix": "Internet",
							"sourcePortRange": "*"
						}
					},
					{
						"name": "Allow_GatewayManager_TCP_65200-65535_Inbound",
						"properties": {
							"access": "Allow",
							"description": "https://docs.microsoft.com/en-us/azure/application-gateway/configuration-overview#network-security-groups-on-the-application-gateway-subnet",
							"destinationAddressPrefix": "*",
							"destinationPortRange": "65200-65535",
							"direction": "Inbound",
							"priority": 1010,
							"protocol": "TCP",
							"sourceAddressPrefix": "GatewayManager",
							"sourcePortRange": "*"
						}
					},
					{
						"name": "Allow_AzureLoadBalancer_Any_Any_Inbound",
						"properties": {
							"access": "Allow",
							"description": "https://docs.microsoft.com/en-us/azure/application-gateway/configuration-overview#network-security-groups-on-the-application-gateway-subnet",
							"destinationAddressPrefix": "*",
							"destinationPortRange": "*",
							"direction": "Inbound",
							"priority": 1020,
							"protocol": "*",
							"sourceAddressPrefix": "AzureLoadBalancer",
							"sourcePortRange": "*"
						}
					},
					{
						"name": "Deny_AllOther_Inbound",
						"properties": {
							"access": "Deny",
							"destinationAddressPrefix": "*",
							"destinationPortRange": "*",
							"direction": "Inbound",
							"priority": 4096,
							"protocol": "*",
							"sourceAddressPrefix": "*",
							"sourcePortRange": "*"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkSecurityGroups",
			"apiVersion": "2019-11-01",
			"name": "[variables('applicationNetworkSecurityGroupName')]",
			"tags": "[parameters('resourceTags')]",
			"location": "[parameters('resourceLocation')]",
			"properties": {
				"securityRules": [
					{
						"name": "Deny_CustomExclusion_Any_Any_Inbound",
						"properties": {
							"access": "Deny",
							"description": "Custom security rule.",
							"destinationAddressPrefix": "*",
							"destinationPortRange": "*",
							"direction": "Inbound",
							"priority": 500,
							"protocol": "*",
							"sourceAddressPrefixes": "[split(parameters('deniedIpAddressList'),',')]",
							"sourcePortRange": "*"
						}
					},
					{
						"name": "[concat('Allow_', variables('applicationGatewayName'), '_TCP_80_Inbound')]",
						"properties": {
							"access": "Allow",
							"destinationAddressPrefix": "*",
							"destinationPortRange": "80",
							"direction": "Inbound",
							"priority": 1000,
							"protocol": "TCP",
							"sourceAddressPrefix": "[variables('applicationGatewaySubnetAddressPrefix')]",
							"sourcePortRange": "*"
						}
					},
					{
						"name": "[concat('Allow_', variables('bastionName'), '_TCP_22_Inbound')]",
						"properties": {
							"access": "Allow",
							"destinationAddressPrefix": "*",
							"destinationPortRange": "22",
							"direction": "Inbound",
							"priority": 1010,
							"protocol": "TCP",
							"sourceAddressPrefix": "[variables('bastionSubnetAddressPrefix')]",
							"sourcePortRange": "*"
						}
					},
					{
						"name": "Deny_AllOther_Inbound",
						"properties": {
							"access": "Deny",
							"destinationAddressPrefix": "*",
							"destinationPortRange": "*",
							"direction": "Inbound",
							"priority": 4096,
							"protocol": "*",
							"sourceAddressPrefix": "*",
							"sourcePortRange": "*"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkSecurityGroups",
			"apiVersion": "2022-05-01",
			"name": "[variables('databaseServerNetworkSecurityGroupName')]",
			"location": "[parameters('resourceLocation')]",
			"dependsOn": [],
			"properties": {
				"securityRules": [
					{
						"name": "AllowCidrBlockMySQLInbound",
						"id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', variables('databaseServerNetworkSecurityGroupName'), 'AllowCidrBlockMySQLInbound')]",
						"type": "Microsoft.Network/networkSecurityGroups/securityRules",
						"properties": {
							"protocol": "TCP",
							"sourcePortRange": "*",
							"destinationPortRange": "3306",
							"sourceAddressPrefix": "[variables('applicationSubnetAddressPrefix')]",
							"destinationAddressPrefix": "[variables('databaseServerSubnetAddressPrefix')]",
							"access": "Allow",
							"priority": 1000,
							"direction": "Inbound",
							"sourcePortRanges": [],
							"destinationPortRanges": [],
							"sourceAddressPrefixes": [],
							"destinationAddressPrefixes": []
						}
					},
					{
						"name": "DenyAnyCustomAnyInbound",
						"id": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', variables('databaseServerNetworkSecurityGroupName'), 'DenyAnyCustomAnyInbound')]",
						"type": "Microsoft.Network/networkSecurityGroups/securityRules",
						"properties": {
							"protocol": "*",
							"sourcePortRange": "*",
							"destinationPortRange": "*",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Deny",
							"priority": 4096,
							"direction": "Inbound",
							"sourcePortRanges": [],
							"destinationPortRanges": [],
							"sourceAddressPrefixes": [],
							"destinationAddressPrefixes": []
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks",
			"apiVersion": "2019-11-01",
			"name": "[variables('virtualNetworkName')]",
			"tags": "[parameters('resourceTags')]",
			"location": "[parameters('resourceLocation')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/networkSecurityGroups', variables('applicationGatewayNetworkSecurityGroupName'))]",
				"[resourceId('Microsoft.Network/networkSecurityGroups', variables('applicationNetworkSecurityGroupName'))]",
				"[resourceId('Microsoft.Network/networkSecurityGroups', variables('databaseServerNetworkSecurityGroupName'))]"
			],
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('virtualNetworkAddressPrefix')]"
					]
				},
				"subnets": [
					{
						"name": "[variables('bastionSubnetName')]",
						"properties": {
							"addressPrefix": "[variables('bastionSubnetAddressPrefix')]",
							"serviceEndpoints": [],
							"delegations": [],
							"privateEndpointNetworkPolicies": "Enabled",
							"privateLinkServiceNetworkPolicies": "Enabled"
						}
					},
					{
						"name": "[variables('applicationGatewaySubnetName')]",
						"properties": {
							"addressPrefix": "[variables('applicationGatewaySubnetAddressPrefix')]",
							"networkSecurityGroup": {
								"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('applicationGatewayNetworkSecurityGroupName'))]"
							},
							"serviceEndpoints": [],
							"delegations": [],
							"privateEndpointNetworkPolicies": "Enabled",
							"privateLinkServiceNetworkPolicies": "Enabled"
						}
					},
					{
						"name": "[variables('applicationSubnetName')]",
						"properties": {
							"addressPrefix": "[variables('applicationSubnetAddressPrefix')]",
							"networkSecurityGroup": {
								"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('applicationNetworkSecurityGroupName'))]"
							},
							"serviceEndpoints": [],
							"delegations": [],
							"privateEndpointNetworkPolicies": "Enabled",
							"privateLinkServiceNetworkPolicies": "Enabled"
						}
					},
					{
						"name": "[variables('databaseServerSubnetName')]",
						"properties": {
							"addressPrefix": "[variables('databaseServerSubnetAddressPrefix')]",
							"networkSecurityGroup": {
								"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('databaseServerNetworkSecurityGroupName'))]"
							},
							"serviceEndpoints": [],
							"delegations": [
								{
									"name": "Microsoft.DBforMySQL.flexibleServers",
									"properties": {
										"serviceName": "Microsoft.DBforMySQL/flexibleServers"
									}
								}
							],
							"privateEndpointNetworkPolicies": "Enabled",
							"privateLinkServiceNetworkPolicies": "Enabled"
						}
					}
				],
				"virtualNetworkPeerings": [],
				"enableDdosProtection": false,
				"enableVmProtection": false
			}
		},
		{
			"type": "Microsoft.Network/privateDnsZones",
			"apiVersion": "2020-06-01",
			"name": "[variables('privateDnsZoneName')]",
			"tags": "[parameters('resourceTags')]",
			"location": "global",
			"properties": {}
		},
		{
			"type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
			"apiVersion": "2020-06-01",
			"name": "[variables('privateDnsZoneVirtualNetworkLinkName')]",
			"location": "global",
			"dependsOn": [
				"[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]",
				"[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
			],
			"properties": {
				"registrationEnabled": false,
				"virtualNetwork": {
					"id": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
				}
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2019-11-01",
			"name": "[variables('bastionPublicIpName')]",
			"tags": "[parameters('resourceTags')]",
			"location": "[parameters('resourceLocation')]",
			"sku": {
				"name": "Standard"
			},
			"properties": {
				"publicIPAddressVersion": "IPv4",
				"publicIPAllocationMethod": "Static",
				"idleTimeoutInMinutes": 4,
				"ipTags": []
			}
		},
		{
			"type": "Microsoft.Network/bastionHosts",
			"apiVersion": "2019-11-01",
			"name": "[variables('bastionName')]",
			"tags": "[parameters('resourceTags')]",
			"location": "[parameters('resourceLocation')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpName'))]",
				"[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "IpConf",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpName'))]"
							},
							"subnet": {
								"id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('bastionSubnetName'))]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2019-11-01",
			"name": "[variables('applicationGatewayPublicIpName')]",
			"tags": "[parameters('resourceTags')]",
			"location": "[parameters('resourceLocation')]",
			"sku": {
				"name": "Standard"
			},
			"properties": {
				"publicIPAddressVersion": "IPv4",
				"publicIPAllocationMethod": "Static",
				"idleTimeoutInMinutes": 4,
				"dnsSettings": {
					"domainNameLabel": "[variables('applicationGatewayPublicIpDomainNameLabel')]"
				},
				"ipTags": []
			}
		},
		{
			"type": "Microsoft.Network/applicationGateways",
			"apiVersion": "2023-11-01",
			"name": "[variables('applicationGatewayName')]",
			"tags": "[parameters('resourceTags')]",
			"location": "[parameters('resourceLocation')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
				"[resourceId('Microsoft.Network/publicIPAddresses', variables('applicationGatewayPublicIpName'))]"
			],
			"identity": {
				"type": "UserAssigned",
				"userAssignedIdentities": "[parameters('applicationGatewayUserAssignedIdentity')]"
			},
			"properties": {
				"sku": {
					"name": "Standard_v2",
					"tier": "Standard_v2"
				},
				"gatewayIPConfigurations": [
					{
						"name": "[variables('applicationGatewayGatewayIPConfigurationsName')]",
						"properties": {
							"subnet": {
								"id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('applicationGatewaySubnetName'))]"
							}
						}
					}
				],
				"frontendIPConfigurations": [
					{
						"name": "[variables('applicationGatewayFrontendIPConfigurationsName')]",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('applicationGatewayPublicIpName'))]"
							}
						}
					}
				],
				"frontendPorts": [
					{
						"name": "[variables('applicationGatewayFrontendPortHttpName')]",
						"properties": {
							"port": 80
						}
					},
					{
						"name": "[variables('applicationGatewayFrontendPortHttpsName')]",
						"properties": {
							"port": 443
						}
					}
				],
				"backendAddressPools": [
					{
						"name": "[variables('applicationGatewayBackendAddressPoolName')]",
						"properties": {
							"backendAddresses": []
						}
					}
				],
				"backendHttpSettingsCollection": [
					{
						"name": "[variables('applicationGatewayBackendHttpSettingsCollectionName')]",
						"properties": {
							"port": 80,
							"protocol": "Http",
							"cookieBasedAffinity": "Disabled",
							"pickHostNameFromBackendAddress": false,
							"requestTimeout": "[variables('applicationGatewayBackendHttpSettingsCollectionRequestTimeout')]"
						}
					}
				],
				"sslCertificates": [
					{
						"name": "[variables('applicationGatewaySslCertificateHttpsName')]",
						"properties": {
							"keyVaultSecretId": "[parameters('applicationGatewaySslCertificateUri')]"
						}
					}
				],
				"httpListeners": [
					{
						"name": "[variables('applicationGatewayHttpListenersHttpsName')]",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/frontendIPConfigurations/', variables('applicationGatewayFrontendIPConfigurationsName'))]"
							},
							"frontendPort": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/frontendPorts/', variables('applicationGatewayFrontendPortHttpsName'))]"
							},
							"protocol": "Https",
							"sslCertificate": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/sslCertificates/', variables('applicationGatewaySslCertificateHttpsName'))]"
							},
							"hostNames": [],
							"requireServerNameIndication": false
						}
					},
					{
						"name": "[variables('applicationGatewayHttpListenersHttpName')]",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/frontendIPConfigurations/', variables('applicationGatewayFrontendIPConfigurationsName'))]"
							},
							"frontendPort": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/frontendPorts/', variables('applicationGatewayFrontendPortHttpName'))]"
							},
							"protocol": "Http",
							"hostNames": [],
							"requireServerNameIndication": false
						}
					}
				],
				"urlPathMaps": [],
				"requestRoutingRules": [
					{
						"name": "[variables('applicationGatewayRequestRoutingRuleHttpsName')]",
						"properties": {
							"ruleType": "Basic",
							"priority": 10010,
							"httpListener": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/httpListeners/', variables('applicationGatewayHttpListenersHttpsName'))]"
							},
							"backendAddressPool": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/backendAddressPools/', variables('applicationGatewayBackendAddressPoolName'))]"
							},
							"backendHttpSettings": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/backendHttpSettingsCollection/', variables('applicationGatewayBackendHttpSettingsCollectionName'))]"
							},
							"rewriteRuleSet": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/rewriteRuleSets/', variables('applicationGatewayRewriteRuleSetsName'))]"
							}
						}
					},
					{
						"name": "[variables('applicationGatewayRequestRoutingRuleHttpName')]",
						"properties": {
							"ruleType": "Basic",
							"priority": 10020,
							"httpListener": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/httpListeners/', variables('applicationGatewayHttpListenersHttpName'))]"
							},
							"redirectConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/redirectConfigurations/', variables('applicationGatewayRedirectConfigurationsName'))]"
							}
						}
					}
				],
				"probes": [],
				"rewriteRuleSets": [
					{
						"name": "[variables('applicationGatewayRewriteRuleSetsName')]",
						"properties": {
							"rewriteRules": [
								{
									"ruleSequence": 100,
									"conditions": [],
									"name": "StrictTransportSecurity",
									"actionSet": {
										"requestHeaderConfigurations": [],
										"responseHeaderConfigurations": [
											{
												"headerName": "Strict-Transport-Security",
												"headerValue": "max-age=63072000"
											}
										]
									}
								}
							]
						}
					}
				],
				"redirectConfigurations": [
					{
						"name": "[variables('applicationGatewayRedirectConfigurationsName')]",
						"properties": {
							"redirectType": "Permanent",
							"targetListener": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/httpListeners/', variables('applicationGatewayHttpListenersHttpsName'))]"
							},
							"includePath": true,
							"includeQueryString": true,
							"requestRoutingRules": [
								{
									"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/requestRoutingRules/', variables('applicationGatewayRequestRoutingRuleHttpName'))]"
								}
							]
						}
					}
				],
				"sslPolicy": {
					"policyType": "Predefined",
					"policyName": "AppGwSslPolicy20220101"
				},
				"enableHttp2": false,
				"autoscaleConfiguration": {
					"minCapacity": 1,
					"maxCapacity": 10
				}
			}
		},
		{
			"type": "Microsoft.Insights/diagnosticSettings",
			"apiVersion": "2021-05-01-preview",
			"name": "local-logging",
			"dependsOn": [
				"[resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName'))]",
				"[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
			],
			"scope": "[concat('Microsoft.Network/applicationGateways', '/', variables('applicationGatewayName'))]",
			"properties": {
				"logs": [
					{
						"category": "ApplicationGatewayAccessLog",
						"enabled": true,
						"retentionPolicy": {
							"days": 0,
							"enabled": false
						}
					}
				],
				"workspaceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
			}
		},
		{
			"type": "Microsoft.DBforMySQL/flexibleServers",
			"apiVersion": "[variables('databaseServerApiVersion')]",
			"name": "[variables('databaseServerName')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
				"[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]"
			],
			"location": "[parameters('resourceLocation')]",
			"tags": "[parameters('resourceTags')]",
			"sku": {
				"name": "[parameters('databaseServerSkuName')]",
				"tier": "[parameters('databaseServerSkuTier')]"
			},
			"properties": {
				"version": "[parameters('databaseServerVersion')]",
				"administratorLogin": "[parameters('databaseServerAdministratorLogin')]",
				"administratorLoginPassword": "[parameters('databaseServerAdministratorLoginPassword')]",
				"Network": {
					"DelegatedSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('databaseServerSubnetName'))]",
					"PrivateDnsZoneResourceId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]"
				},
				"Storage": {
					"StorageSizeGB": "[parameters('databaseServerStorageSizeGB')]",
					"Iops": "[parameters('databaseServerStorageIops')]",
					"Autogrow": "[parameters('databaseServerStorageAutogrow')]"
				},
				"Backup": {
					"backupRetentionDays": "[parameters('databaseServerBackupRetentionDays')]",
					"geoRedundantBackup": "[parameters('databaseServerGeoRedundantBackup')]"
				},
				"highAvailability": {
					"mode": "[parameters('databaseServerHighAvailabilityMode')]",
					"standbyAvailabilityZone": "[parameters('databaseServerStandbyAvailabilityZone')]"
				}
			}
		},
		{
			"type": "Microsoft.DBforMySQL/flexibleServers/configurations",
			"apiVersion": "[variables('databaseServerApiVersion')]",
			"name": "[concat(variables('databaseServerName'), '/audit_log_enabled')]",
			"comments": "Ref. CIS Microsoft Azure Foundations Benchmark v1.5.0 - 08-16-2022 - 4.4.3 Ensure server parameter 'audit_log_enabled' is set to 'ON' for MySQL Database Server.",
			"dependsOn": [
				"[resourceId('Microsoft.DBforMySQL/flexibleServers', variables('databaseServerName'))]"
			],
			"properties": {
				"value": "ON",
				"source": "user-override"
			}
		},
		{
			"type": "Microsoft.DBforMySQL/flexibleServers/configurations",
			"apiVersion": "[variables('databaseServerApiVersion')]",
			"name": "[concat(variables('databaseServerName'), '/audit_log_events')]",
			"comments": "Ref. CIS Microsoft Azure Foundations Benchmark v1.5.0 - 08-16-2022 - 4.4.4 Ensure server parameter 'audit_log_events' has 'CONNECTION' set for MySQL Database Server.",
			"dependsOn": [
				"[resourceId('Microsoft.DBforMySQL/flexibleServers', variables('databaseServerName'))]"
			],
			"properties": {
				"value": "[if(contains(toUpper(parameters('databaseServerConfigurationAuditLogEvents')), 'CONNECTION'), parameters('databaseServerConfigurationAuditLogEvents'), concat(parameters('databaseServerConfigurationAuditLogEvents'), if(empty(parameters('databaseServerConfigurationAuditLogEvents')), '', ','), 'CONNECTION'))]",
				"source": "user-override"
			}
		},
		{
			"type": "Microsoft.DBforMySQL/flexibleServers/configurations",
			"apiVersion": "[variables('databaseServerApiVersion')]",
			"name": "[concat(variables('databaseServerName'), '/character_set_server')]",
			"dependsOn": [
				"[resourceId('Microsoft.DBforMySQL/flexibleServers', variables('databaseServerName'))]"
			],
			"properties": {
				"value": "[parameters('databaseServerConfigurationCharacterSetServer')]",
				"source": "user-override"
			}
		},
		{
			"type": "Microsoft.DBforMySQL/flexibleServers/configurations",
			"apiVersion": "[variables('databaseServerApiVersion')]",
			"name": "[concat(variables('databaseServerName'), '/collation_server')]",
			"dependsOn": [
				"[resourceId('Microsoft.DBforMySQL/flexibleServers', variables('databaseServerName'))]"
			],
			"properties": {
				"value": "[parameters('databaseServerConfigurationCollationServer')]",
				"source": "user-override"
			}
		},
		{
			"type": "Microsoft.DBforMySQL/flexibleServers/configurations",
			"apiVersion": "[variables('databaseServerApiVersion')]",
			"name": "[concat(variables('databaseServerName'), '/require_secure_transport')]",
			"comments": "Ref. CIS Microsoft Azure Foundations Benchmark v1.5.0 - 08-16-2022 - 4.4.1 Ensure 'Enforce SSL connection' is set to 'Enabled' for Standard MySQL Database Server.",
			"dependsOn": [
				"[resourceId('Microsoft.DBforMySQL/flexibleServers', variables('databaseServerName'))]"
			],
			"properties": {
				"value": "ON",
				"source": "user-override"
			}
		},
		{
			"type": "Microsoft.DBforMySQL/flexibleServers/configurations",
			"apiVersion": "[variables('databaseServerApiVersion')]",
			"name": "[concat(variables('databaseServerName'), '/sql_generate_invisible_primary_key')]",
			"dependsOn": [
				"[resourceId('Microsoft.DBforMySQL/flexibleServers', variables('databaseServerName'))]"
			],
			"properties": {
				"value": "OFF",
				"source": "user-override"
			}
		},
		{
			"type": "Microsoft.DBforMySQL/flexibleServers/configurations",
			"apiVersion": "[variables('databaseServerApiVersion')]",
			"name": "[concat(variables('databaseServerName'), '/tls_version')]",
			"comments": "Ref. CIS Microsoft Azure Foundations Benchmark v1.5.0 - 08-16-2022 - 4.4.2 Ensure 'TLS Version' is set to 'TLSV1.2' for MySQL flexible Database Server.",
			"dependsOn": [
				"[resourceId('Microsoft.DBforMySQL/flexibleServers', variables('databaseServerName'))]"
			],
			"properties": {
				"value": "TLSV1.2,TLSV1.3",
				"source": "user-override"
			}
		},
		{
			"type": "Microsoft.Insights/diagnosticSettings",
			"apiVersion": "2021-05-01-preview",
			"name": "local-mysql-logging",
			"dependsOn": [
				"[resourceId('Microsoft.DBforMySQL/flexibleServers', variables('databaseServerName'))]"
			],
			"scope": "[resourceId('Microsoft.DBforMySQL/flexibleServers', variables('databaseServerName'))]",
			"properties": {
				"logs": [
					{
						"category": "MySqlAuditLogs",
						"enabled": true,
						"retentionPolicy": {
							"days": 0,
							"enabled": false
						}
					}
				],
				"workspaceId": "[resourceId('microsoft.operationalinsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2020-05-01",
			"name": "[variables('webServerVirtualMachineNetworkInterfaceCardName')]",
			"tags": "[parameters('resourceTags')]",
			"dependsOn": [
				"[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
				"[resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName'))]"
			],
			"location": "[parameters('resourceLocation')]",
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('applicationSubnetName'))]"
							},
							"primary": true,
							"privateIPAddressVersion": "IPv4",
							"applicationGatewayBackendAddressPools": [
								{
									"id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/backendAddressPools/', variables('applicationGatewayBackendAddressPoolName'))]"
								}
							]
						}
					}
				],
				"dnsSettings": {
					"dnsServers": []
				},
				"enableAcceleratedNetworking": true,
				"enableIPForwarding": false
			}
		},
		{
			"type": "Microsoft.Compute/disks",
			"apiVersion": "2019-07-01",
			"name": "[variables('webServerVirtualMachineDataDiskName')]",
			"tags": "[parameters('resourceTags')]",
			"location": "[parameters('resourceLocation')]",
			"sku": {
				"name": "Premium_LRS",
				"tier": "Premium"
			},
			"properties": {
				"creationData": {
					"createOption": "Empty"
				},
				"diskSizeGB": "[parameters('dataDiskSizeGB')]",
				"encryption": {
					"type": "EncryptionAtRestWithPlatformKey"
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2020-06-01",
			"name": "[variables('webServerVirtualMachineName')]",
			"tags": "[union(parameters('resourceTags'), parameters('virtualMachineTags'))]",
			"dependsOn": [
				"[resourceId('Microsoft.Compute/disks', variables('webServerVirtualMachineDataDiskName'))]",
				"[resourceId('Microsoft.Network/networkInterfaces', variables('webServerVirtualMachineNetworkInterfaceCardName'))]"
			],
			"location": "[parameters('resourceLocation')]",
			"properties": {
				"hardwareProfile": {
					"vmSize": "[parameters('webServerVirtualMachineSize')]"
				},
				"storageProfile": {
					"imageReference": {
						"publisher": "Canonical",
						"offer": "0001-com-ubuntu-server-focal",
						"sku": "20_04-lts-gen2",
						"version": "latest"
					},
					"osDisk": {
						"osType": "Linux",
						"name": "[variables('webServerVirtualMachineOsDiskName')]",
						"createOption": "FromImage",
						"caching": "ReadWrite"
					},
					"dataDisks": [
						{
							"lun": 0,
							"name": "[variables('webServerVirtualMachineDataDiskName')]",
							"createOption": "Attach",
							"caching": "ReadOnly",
							"writeAcceleratorEnabled": false,
							"managedDisk": {
								"id": "[resourceId('Microsoft.Compute/disks', concat(variables('webServerVirtualMachineDataDiskName')))]"
							},
							"toBeDetached": false
						}
					]
				},
				"osProfile": {
					"computerName": "[variables('webServerComputerName')]",
					"adminUsername": "[parameters('webServerAdminUsername')]",
					"adminPassword": "[parameters('webServerAdminPassword')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": false,
						"provisionVMAgent": true
					},
					"secrets": [],
					"allowExtensionOperations": true
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces', variables('webServerVirtualMachineNetworkInterfaceCardName'))]"
						}
					]
				},
				"diagnosticsProfile": {
					"bootDiagnostics": {
						"enabled": true
					}
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"apiVersion": "2020-06-01",
			"name": "[concat(variables('webServerVirtualMachineName'),'/', variables('webServerVirtualMachineSetUpExtensionName'))]",
			"location": "[parameters('resourceLocation')]",
			"dependsOn": [
				"[resourceId('Microsoft.Compute/virtualMachines/', variables('webServerVirtualMachineName'))]",
				"[resourceId('Microsoft.DBforMySQL/flexibleServers', variables('databaseServerName'))]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.1",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"timestamp": "[parameters('deploymentTimestamp')]"
				},
				"protectedSettings": {
					"fileUris": [
						"[concat(parameters('genericShellScriptsRepoRawFilesBaseUrl'),'/ubuntu-20.04/apache2.sh')]",
						"[concat(parameters('genericShellScriptsRepoRawFilesBaseUrl'),'/ubuntu-20.04/install_unattended_upgrade_tools')]",
						"[concat(parameters('genericShellScriptsRepoRawFilesBaseUrl'),'/ubuntu-20.04/logger.sh')]",
						"[concat(parameters('genericShellScriptsRepoRawFilesBaseUrl'),'/ubuntu-20.04/mysql.sh')]",
						"[concat(parameters('genericShellScriptsRepoRawFilesBaseUrl'),'/ubuntu-20.04/os.sh')]",
						"[concat(parameters('genericShellScriptsRepoRawFilesBaseUrl'),'/ubuntu-20.04/php.sh')]",
						"[concat(parameters('genericShellScriptsRepoRawFilesBaseUrl'),'/ubuntu-20.04/upgrade_server')]",
						"[concat(parameters('genericShellScriptsRepoRawFilesBaseUrl'),'/ubuntu-20.04/utils.sh')]",
						"[concat(parameters('projectPublicRawFilesBaseUrl'),'/scripts/install_matomo')]",
						"[concat(parameters('projectPublicRawFilesBaseUrl'),'/scripts/setup_web_server')]"
					],
					"commandToExecute": "[concat('sudo ./setup_web_server', ' --data_disk_size ', parameters('dataDiskSizeGB'), 'G', ' --db_server_admin_password ', parameters('databaseServerAdministratorLoginPassword'), ' --db_server_admin_username ', parameters('databaseServerAdministratorLogin'), ' --db_server_fqdn ', reference(variables('databaseServerName')).fullyQualifiedDomainName, ' --matomo_database_name ', variables('matomoDatabaseName'), ' --matomo_database_password ', parameters('matomoDatabasePassword'), ' --matomo_database_username ', parameters('matomoDatabaseUsername'), ' --matomo_version ', parameters('matomoVersion'), ' --php_max_execution_time ', parameters('webServerBackendMaxExecutionTime'), ' --smtp_server_fqdn ', parameters('smtpServerFqdn'), ' --smtp_server_from_address ', parameters('smtpServerFromAddress'), ' --smtp_server_password ', parameters('smtpServerPassword'), ' --smtp_server_port ', parameters('smtpServerPort'), ' --smtp_server_username ', parameters('smtpServerUsername'), ' --web_server_admin_email ', parameters('webServerAdminEmail'), ' --web_server_fqdn ', if(empty(parameters('webServerFqdn')), reference(variables('applicationGatewayPublicIpName')).dnsSettings.fqdn, parameters('webServerFqdn')), ' --web_server_reboot_utc_time ', parameters('webServerRebootUtcTime'), ' --web_server_resource_name ',  variables('webServerVirtualMachineName'), ' > /var/log/setup_web_server.$(date +\"%Y%m%dT%H%M%S\").log 2>&1')]"
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "[variables('recoveryServiceVaultDeploymentName')]",
			"dependsOn": [
				"[resourceId('Microsoft.Compute/disks', variables('webServerVirtualMachineDataDiskName'))]"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[concat(parameters('armTemplateRepoRawFilesBaseUrl'), '/Recovery%20Services%20Vault/VaultDeploy.json')]"
				},
				"parameters": {
					"projectName": {
						"value": "[parameters('projectShortName')]"
					},
					"environmentName": {
						"value": "[parameters('environmentName')]"
					},
					"resourceTags": {
						"value": "[parameters('resourceTags')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "[variables('recoveryServiceVaultBackupPoliciesDeploymentName')]",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', variables('recoveryServiceVaultDeploymentName'))]"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[concat(parameters('armTemplateRepoRawFilesBaseUrl'), '/Recovery%20Services%20Vault/VM%20Backup/VMDailyPolicyDeploy.json')]"
				},
				"parameters": {
					"vaultName": {
						"value": "[reference(variables('recoveryServiceVaultDeploymentName')).outputs.vaultName.value]"
					},
					"dailyBackupsRetention": {
						"value": 90
					},
					"instantRpRetentionRangeInDays": {
						"value": 5
					},
					"backupTime": {
						"value": "02:00"
					}
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "[variables('recoveryServiceVaultProtectedItemsDeploymentName')]",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', variables('recoveryServiceVaultBackupPoliciesDeploymentName'))]",
				"[resourceId('Microsoft.Compute/virtualMachines', variables('webServerVirtualMachineName'))]"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[concat(parameters('armTemplateRepoRawFilesBaseUrl'), '/Recovery%20Services%20Vault/VM%20Backup/VMBackupDeploy.json')]"
				},
				"parameters": {
					"vaultName": {
						"value": "[reference(variables('recoveryServiceVaultDeploymentName')).outputs.vaultName.value]"
					},
					"policyName": {
						"value": "[reference(variables('recoveryServiceVaultBackupPoliciesDeploymentName')).outputs.policyName.value]"
					},
					"vmName": {
						"value": "[variables('webServerVirtualMachineName')]"
					},
					"vmRGName": {
						"value": "[resourceGroup().name]"
					},
					"vmSubID": {
						"value": "[subscription().subscriptionId]"
					}
				}
			}
		}
	],
	"outputs": {
		"virtualNetworkName": {
			"type": "string",
			"value": "[variables('virtualNetworkName')]"
		}
	}
}
